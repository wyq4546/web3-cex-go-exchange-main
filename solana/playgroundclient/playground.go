// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: playground.proto

package playgroundclient

import (
	"context"

	"grpc-common/solana/types/playground"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AirdropRequest     = playground.AirdropRequest
	AirdropResponse    = playground.AirdropResponse
	GetBalanceRequest  = playground.GetBalanceRequest
	GetBalanceResponse = playground.GetBalanceResponse
	TransferRequest    = playground.TransferRequest
	TransferResponse   = playground.TransferResponse

	Playground interface {
		GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
		Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
		Airdrop(ctx context.Context, in *AirdropRequest, opts ...grpc.CallOption) (*AirdropResponse, error)
	}

	defaultPlayground struct {
		cli zrpc.Client
	}
)

func NewPlayground(cli zrpc.Client) Playground {
	return &defaultPlayground{
		cli: cli,
	}
}

func (m *defaultPlayground) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	client := playground.NewPlaygroundClient(m.cli.Conn())
	return client.GetBalance(ctx, in, opts...)
}

func (m *defaultPlayground) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	client := playground.NewPlaygroundClient(m.cli.Conn())
	return client.Transfer(ctx, in, opts...)
}

func (m *defaultPlayground) Airdrop(ctx context.Context, in *AirdropRequest, opts ...grpc.CallOption) (*AirdropResponse, error) {
	client := playground.NewPlaygroundClient(m.cli.Conn())
	return client.Airdrop(ctx, in, opts...)
}
